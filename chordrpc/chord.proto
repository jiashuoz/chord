syntax = "proto3";

package chordrpc;

// Chord is the service for chord communication
service Chord {
    // FindSuccessor returns successor node of ID. Could initiate other RPC calls.
    rpc FindSuccessor(ID) returns (Node);

    // FindSuccessor returns closest node of ID in the finger table.
    rpc FindClosestPrecedingNode(ID) returns (Node);

    // GetPredecessor returns current node's predecessor.
    rpc GetPredecessor(NN) returns (Node);

    // GetSuccessor returns current node's successor.
    rpc GetSuccessor(NN) returns (Node);

    // Notify notifies Chord that Node might be the predecessor.
    rpc Notify(Node) returns (NN);

    // For KVStore
    rpc Get(GetRequest) returns (GetReply);

    rpc Put(PutRequest) returns (PutReply);

    rpc Delete(DeleteRequest) returns (DeleteReply);
}

// Node contains a node ID and ip address.
message Node {
    bytes id = 1;
    string ip = 2;
}

message NN {} // Empty message

// ID contains a node ID
message ID {
    bytes id = 1;
}

// For KV store
message GetRequest {
    string key = 1;
}

message GetReply {
    string val = 1;
}

message PutRequest {
    string key = 1;
    string val = 2;
}

message PutReply {
}

message DeleteRequest {
    string key = 1;
}

message DeleteReply {
    string val = 2;
}
