// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

package chordrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Node contains a node ID and ip address.
type Node struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Node) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type NN struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NN) Reset()         { *m = NN{} }
func (m *NN) String() string { return proto.CompactTextString(m) }
func (*NN) ProtoMessage()    {}
func (*NN) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{1}
}

func (m *NN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NN.Unmarshal(m, b)
}
func (m *NN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NN.Marshal(b, m, deterministic)
}
func (m *NN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NN.Merge(m, src)
}
func (m *NN) XXX_Size() int {
	return xxx_messageInfo_NN.Size(m)
}
func (m *NN) XXX_DiscardUnknown() {
	xxx_messageInfo_NN.DiscardUnknown(m)
}

var xxx_messageInfo_NN proto.InternalMessageInfo

// ID contains a node ID
type ID struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{2}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// For KV store
type GetRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{3}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetReply struct {
	Val                  string   `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{4}
}

func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type PutRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{5}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutRequest) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type PutReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutReply) Reset()         { *m = PutReply{} }
func (m *PutReply) String() string { return proto.CompactTextString(m) }
func (*PutReply) ProtoMessage()    {}
func (*PutReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{6}
}

func (m *PutReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutReply.Unmarshal(m, b)
}
func (m *PutReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutReply.Marshal(b, m, deterministic)
}
func (m *PutReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutReply.Merge(m, src)
}
func (m *PutReply) XXX_Size() int {
	return xxx_messageInfo_PutReply.Size(m)
}
func (m *PutReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PutReply.DiscardUnknown(m)
}

var xxx_messageInfo_PutReply proto.InternalMessageInfo

type DeleteRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{7}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteReply struct {
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReply) Reset()         { *m = DeleteReply{} }
func (m *DeleteReply) String() string { return proto.CompactTextString(m) }
func (*DeleteReply) ProtoMessage()    {}
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{8}
}

func (m *DeleteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReply.Unmarshal(m, b)
}
func (m *DeleteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReply.Marshal(b, m, deterministic)
}
func (m *DeleteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReply.Merge(m, src)
}
func (m *DeleteReply) XXX_Size() int {
	return xxx_messageInfo_DeleteReply.Size(m)
}
func (m *DeleteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReply proto.InternalMessageInfo

func (m *DeleteReply) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type RequestKeyValueRequest struct {
	Start                []byte   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte   `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestKeyValueRequest) Reset()         { *m = RequestKeyValueRequest{} }
func (m *RequestKeyValueRequest) String() string { return proto.CompactTextString(m) }
func (*RequestKeyValueRequest) ProtoMessage()    {}
func (*RequestKeyValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{9}
}

func (m *RequestKeyValueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestKeyValueRequest.Unmarshal(m, b)
}
func (m *RequestKeyValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestKeyValueRequest.Marshal(b, m, deterministic)
}
func (m *RequestKeyValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestKeyValueRequest.Merge(m, src)
}
func (m *RequestKeyValueRequest) XXX_Size() int {
	return xxx_messageInfo_RequestKeyValueRequest.Size(m)
}
func (m *RequestKeyValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestKeyValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestKeyValueRequest proto.InternalMessageInfo

func (m *RequestKeyValueRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *RequestKeyValueRequest) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

type KeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val                  string   `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{10}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type RequestKeyValueReply struct {
	KeyValues            []*KeyValue `protobuf:"bytes,1,rep,name=keyValues,proto3" json:"keyValues,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RequestKeyValueReply) Reset()         { *m = RequestKeyValueReply{} }
func (m *RequestKeyValueReply) String() string { return proto.CompactTextString(m) }
func (*RequestKeyValueReply) ProtoMessage()    {}
func (*RequestKeyValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{11}
}

func (m *RequestKeyValueReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestKeyValueReply.Unmarshal(m, b)
}
func (m *RequestKeyValueReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestKeyValueReply.Marshal(b, m, deterministic)
}
func (m *RequestKeyValueReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestKeyValueReply.Merge(m, src)
}
func (m *RequestKeyValueReply) XXX_Size() int {
	return xxx_messageInfo_RequestKeyValueReply.Size(m)
}
func (m *RequestKeyValueReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestKeyValueReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestKeyValueReply proto.InternalMessageInfo

func (m *RequestKeyValueReply) GetKeyValues() []*KeyValue {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "chordrpc.Node")
	proto.RegisterType((*NN)(nil), "chordrpc.NN")
	proto.RegisterType((*ID)(nil), "chordrpc.ID")
	proto.RegisterType((*GetRequest)(nil), "chordrpc.GetRequest")
	proto.RegisterType((*GetReply)(nil), "chordrpc.GetReply")
	proto.RegisterType((*PutRequest)(nil), "chordrpc.PutRequest")
	proto.RegisterType((*PutReply)(nil), "chordrpc.PutReply")
	proto.RegisterType((*DeleteRequest)(nil), "chordrpc.DeleteRequest")
	proto.RegisterType((*DeleteReply)(nil), "chordrpc.DeleteReply")
	proto.RegisterType((*RequestKeyValueRequest)(nil), "chordrpc.RequestKeyValueRequest")
	proto.RegisterType((*KeyValue)(nil), "chordrpc.KeyValue")
	proto.RegisterType((*RequestKeyValueReply)(nil), "chordrpc.RequestKeyValueReply")
}

func init() { proto.RegisterFile("chord.proto", fileDescriptor_541dae51990542ec) }

var fileDescriptor_541dae51990542ec = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6f, 0x9b, 0x30,
	0x14, 0xc6, 0x05, 0xb4, 0x11, 0x79, 0xd0, 0x68, 0xb2, 0xd8, 0x86, 0xd0, 0xd4, 0x31, 0x1f, 0xaa,
	0x1c, 0x36, 0x5a, 0x75, 0x97, 0x1e, 0x27, 0x35, 0x1a, 0xab, 0x26, 0xb1, 0x88, 0x49, 0xbb, 0x33,
	0xfc, 0xb6, 0xa1, 0x5a, 0x81, 0x61, 0x53, 0x89, 0xbf, 0x77, 0xff, 0xc8, 0x64, 0x37, 0xd4, 0x49,
	0x48, 0xa2, 0xde, 0xfc, 0xfc, 0x7d, 0xbf, 0x67, 0x9b, 0xf7, 0x01, 0x5e, 0xf9, 0xa7, 0x6e, 0x59,
	0xd2, 0xb4, 0xb5, 0xac, 0x89, 0xab, 0x8b, 0xb6, 0x29, 0xe9, 0x05, 0x9c, 0x64, 0x35, 0x43, 0x32,
	0x03, 0xbb, 0x62, 0xa1, 0x15, 0x5b, 0x73, 0x3f, 0xb7, 0x2b, 0xa6, 0xeb, 0x26, 0xb4, 0x63, 0x6b,
	0x3e, 0xcd, 0xed, 0xaa, 0xa1, 0x27, 0x60, 0x67, 0x19, 0x0d, 0xc0, 0xbe, 0x5b, 0xec, 0x7a, 0xe9,
	0x39, 0x40, 0x8a, 0x32, 0xc7, 0xbf, 0x1d, 0x0a, 0x49, 0x5e, 0x80, 0x73, 0x8f, 0xbd, 0x96, 0xa7,
	0xb9, 0x5a, 0xd2, 0x37, 0xe0, 0x6a, 0xbd, 0xe1, 0xbd, 0x52, 0x1f, 0x0a, 0x3e, 0xa8, 0x0f, 0x05,
	0xa7, 0x57, 0x00, 0xcb, 0xee, 0x30, 0x3d, 0x10, 0xb6, 0x21, 0x00, 0x5c, 0x4d, 0x34, 0xbc, 0xa7,
	0xef, 0xe0, 0x6c, 0x81, 0x1c, 0x25, 0x1e, 0x3e, 0xfe, 0x2d, 0x78, 0x83, 0x65, 0xe3, 0x06, 0x1b,
	0xfd, 0x3e, 0xc1, 0xab, 0x35, 0xfd, 0x15, 0xfb, 0x1f, 0x05, 0xef, 0x9e, 0x9a, 0x05, 0x70, 0x2a,
	0x64, 0xd1, 0xca, 0xf5, 0x63, 0x1f, 0x0b, 0xd5, 0x01, 0x57, 0x4c, 0x77, 0xf0, 0x73, 0xb5, 0xa4,
	0x09, 0xb8, 0x03, 0xfa, 0xac, 0x17, 0x7c, 0x81, 0x60, 0x74, 0xa2, 0xba, 0xdb, 0x15, 0x4c, 0xef,
	0xd7, 0x1b, 0x22, 0xb4, 0x62, 0x67, 0xee, 0x5d, 0x93, 0x64, 0x98, 0x55, 0xf2, 0xe4, 0x35, 0xa6,
	0xeb, 0x7f, 0x0e, 0x9c, 0xde, 0x2a, 0x03, 0xf9, 0x00, 0x67, 0x9f, 0xab, 0x15, 0xfb, 0xde, 0x95,
	0x25, 0x0a, 0x51, 0xb7, 0xc4, 0x37, 0xe4, 0xdd, 0x22, 0x9a, 0x99, 0x4a, 0x0f, 0xfc, 0x06, 0x42,
	0x65, 0xbf, 0xe5, 0xb5, 0x40, 0x21, 0x97, 0x2d, 0x96, 0xc8, 0xaa, 0xd5, 0x6f, 0xad, 0x1d, 0x27,
	0x13, 0x98, 0xa5, 0xa8, 0x08, 0x86, 0xe3, 0x93, 0xb2, 0x6c, 0xe4, 0x7f, 0x0f, 0x7e, 0x8a, 0x72,
	0xef, 0xbd, 0xf6, 0xb8, 0x2f, 0x60, 0x92, 0xd5, 0xb2, 0xfa, 0xd5, 0x93, 0x1d, 0x25, 0xda, 0xe2,
	0xc8, 0x25, 0x38, 0x29, 0x4a, 0x12, 0x98, 0x4d, 0x93, 0xc1, 0x88, 0xec, 0xec, 0xaa, 0x6f, 0x7b,
	0x09, 0xce, 0xb2, 0xdb, 0x02, 0x4c, 0xec, 0x36, 0x81, 0x21, 0x5a, 0xe4, 0x06, 0x26, 0x8f, 0xb9,
	0x21, 0xaf, 0x8d, 0xba, 0x15, 0xb6, 0xe8, 0xe5, 0x58, 0x50, 0xe4, 0x37, 0xf0, 0xcc, 0x78, 0x05,
	0x89, 0x8d, 0x6b, 0x7f, 0xce, 0xa2, 0xf3, 0x23, 0x8e, 0x86, 0xf7, 0x3f, 0x27, 0xfa, 0xb7, 0xfd,
	0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x39, 0x92, 0x9e, 0x4c, 0xc5, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordClient interface {
	// FindSuccessor returns successor node of ID. Could initiate other RPC calls.
	FindSuccessor(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error)
	// FindSuccessor returns closest node of ID in the finger table.
	FindClosestPrecedingNode(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error)
	// GetPredecessor returns current node's predecessor.
	GetPredecessor(ctx context.Context, in *NN, opts ...grpc.CallOption) (*Node, error)
	// GetSuccessor returns current node's successor.
	GetSuccessor(ctx context.Context, in *NN, opts ...grpc.CallOption) (*Node, error)
	// Notify notifies Chord that Node might be the predecessor.
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NN, error)
	// For KVStore
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	RequestKeys(ctx context.Context, in *RequestKeyValueRequest, opts ...grpc.CallOption) (*RequestKeyValueReply, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindClosestPrecedingNode(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/FindClosestPrecedingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessor(ctx context.Context, in *NN, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/GetPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetSuccessor(ctx context.Context, in *NN, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/GetSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NN, error) {
	out := new(NN)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) RequestKeys(ctx context.Context, in *RequestKeyValueRequest, opts ...grpc.CallOption) (*RequestKeyValueReply, error) {
	out := new(RequestKeyValueReply)
	err := c.cc.Invoke(ctx, "/chordrpc.Chord/RequestKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
type ChordServer interface {
	// FindSuccessor returns successor node of ID. Could initiate other RPC calls.
	FindSuccessor(context.Context, *ID) (*Node, error)
	// FindSuccessor returns closest node of ID in the finger table.
	FindClosestPrecedingNode(context.Context, *ID) (*Node, error)
	// GetPredecessor returns current node's predecessor.
	GetPredecessor(context.Context, *NN) (*Node, error)
	// GetSuccessor returns current node's successor.
	GetSuccessor(context.Context, *NN) (*Node, error)
	// Notify notifies Chord that Node might be the predecessor.
	Notify(context.Context, *Node) (*NN, error)
	// For KVStore
	Get(context.Context, *GetRequest) (*GetReply, error)
	Put(context.Context, *PutRequest) (*PutReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	RequestKeys(context.Context, *RequestKeyValueRequest) (*RequestKeyValueReply, error)
}

// UnimplementedChordServer can be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (*UnimplementedChordServer) FindSuccessor(ctx context.Context, req *ID) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (*UnimplementedChordServer) FindClosestPrecedingNode(ctx context.Context, req *ID) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindClosestPrecedingNode not implemented")
}
func (*UnimplementedChordServer) GetPredecessor(ctx context.Context, req *NN) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (*UnimplementedChordServer) GetSuccessor(ctx context.Context, req *NN) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessor not implemented")
}
func (*UnimplementedChordServer) Notify(ctx context.Context, req *Node) (*NN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedChordServer) Get(ctx context.Context, req *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedChordServer) Put(ctx context.Context, req *PutRequest) (*PutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedChordServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedChordServer) RequestKeys(ctx context.Context, req *RequestKeyValueRequest) (*RequestKeyValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestKeys not implemented")
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindClosestPrecedingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindClosestPrecedingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/FindClosestPrecedingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindClosestPrecedingNode(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/GetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessor(ctx, req.(*NN))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/GetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessor(ctx, req.(*NN))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_RequestKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).RequestKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chordrpc.Chord/RequestKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).RequestKeys(ctx, req.(*RequestKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chordrpc.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "FindClosestPrecedingNode",
			Handler:    _Chord_FindClosestPrecedingNode_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _Chord_GetPredecessor_Handler,
		},
		{
			MethodName: "GetSuccessor",
			Handler:    _Chord_GetSuccessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Chord_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Chord_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Chord_Delete_Handler,
		},
		{
			MethodName: "RequestKeys",
			Handler:    _Chord_RequestKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
